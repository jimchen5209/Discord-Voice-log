diff --git a/lib/voice/VoiceConnection.js b/lib/voice/VoiceConnection.js
index 0c8ff0e12e647afbb1bf4e9b1b9d868306e7cfa0..6c3f707e700dd984f17d7b1c16b0b7d11c96115a 100644
--- a/lib/voice/VoiceConnection.js
+++ b/lib/voice/VoiceConnection.js
@@ -120,6 +120,7 @@ class VoiceConnection extends EventEmitter {
         this.connectionTimeout = null;
         this.connecting = false;
         this.reconnecting = false;
+        this.resumeing = false;
         this.ready = false;
 
         this.sendBuffer = Buffer.allocUnsafe(16 + 32 + MAX_FRAME_SIZE);
@@ -199,6 +200,14 @@ class VoiceConnection extends EventEmitter {
                 clearTimeout(this.connectionTimeout);
                 this.connectionTimeout = null;
             }
+            if(this.resumeing) {
+                this.sendWS(VoiceOPCodes.RESUME, {
+                    server_id: this.id === "call" ? data.channel_id : this.id,
+                    session_id: data.session_id,
+                    token: data.token
+                })
+                return;
+            }
             this.sendWS(VoiceOPCodes.IDENTIFY, {
                 server_id: this.id === "call" ? data.channel_id : this.id,
                 user_id: data.user_id,
@@ -269,6 +278,11 @@ class VoiceConnection extends EventEmitter {
                     this.sendUDPPacket(udpMessage);
                     break;
                 }
+                case VoiceOPCodes.RESUMED: {
+                    this.connecting = false;
+                    this.resumeing = false;
+                    break;
+                }
                 case VoiceOPCodes.SESSION_DESCRIPTION: {
                     this.mode = packet.d.mode;
                     this.secret = Buffer.from(packet.d.secret_key);
@@ -355,8 +369,20 @@ class VoiceConnection extends EventEmitter {
             this.emit("warn", `Voice WS close ${code}: ${reason}`);
             if(this.connecting || this.ready) {
                 let reconnecting = true;
+                if(code < 4000 || code === 4015) {
+                    this.resumeing = true;
+                    setTimeout(() => {
+                        this.connect(data);
+                    }, 500).unref();
+                    return;
+                }
                 if(code === 4006) {
-                    reconnecting = false;
+                    if(this.channelID) {
+                        reconnecting = true;
+                        err = null;
+                    } else {
+                        reconnecting = false;
+                    }
                 } else if(code === 4014) {
                     if(this.channelID) {
                         data.endpoint = null;
@@ -383,6 +409,7 @@ class VoiceConnection extends EventEmitter {
     disconnect(error, reconnecting) {
         this.connecting = false;
         this.reconnecting = reconnecting;
+        this.resumeing = false;
         this.ready = false;
         this.speaking = false;
         this.timestamp = 0;
diff --git a/lib/voice/streams/OggOpusTransformer.js b/lib/voice/streams/OggOpusTransformer.js
index 6c4baed362327ff8f14101a963f75a5346c2cbeb..c970b6377b3c3e9375e7eb3a70cac889f2518cb4 100644
--- a/lib/voice/streams/OggOpusTransformer.js
+++ b/lib/voice/streams/OggOpusTransformer.js
@@ -95,8 +95,7 @@ class OggOpusTransformer extends BaseTransformer {
                 if(ret instanceof Error) {
                     this.emit("error", ret);
                 }
-                cb();
-                return;
+                break;
             }
         }
 
diff --git a/lib/voice/streams/PCMOpusTransformer.js b/lib/voice/streams/PCMOpusTransformer.js
index ba7cd38e7b045d3013e2d88bf7bf5546aa7fbaf5..8fae1fdb10bc950863de81daeb4236b18199e771 100644
--- a/lib/voice/streams/PCMOpusTransformer.js
+++ b/lib/voice/streams/PCMOpusTransformer.js
@@ -40,7 +40,7 @@ class PCMOpusTransformer extends BaseTransformer {
 
         if(chunk.length < this.pcmSize) {
             this._remainder = chunk;
-            return cb();
+            cb();
         }
 
         chunk._index = 0;
